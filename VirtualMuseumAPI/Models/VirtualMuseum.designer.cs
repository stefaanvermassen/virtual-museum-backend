#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VirtualMuseumAPI.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="VirtualMuseum_DEV")]
	public partial class VirtualMuseumDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertArtist(Artist instance);
    partial void UpdateArtist(Artist instance);
    partial void DeleteArtist(Artist instance);
    partial void InsertPrivacyLevel(PrivacyLevel instance);
    partial void UpdatePrivacyLevel(PrivacyLevel instance);
    partial void DeletePrivacyLevel(PrivacyLevel instance);
    partial void InsertArtistsXUser(ArtistsXUser instance);
    partial void UpdateArtistsXUser(ArtistsXUser instance);
    partial void DeleteArtistsXUser(ArtistsXUser instance);
    partial void InsertArtworkFilter(ArtworkFilter instance);
    partial void UpdateArtworkFilter(ArtworkFilter instance);
    partial void DeleteArtworkFilter(ArtworkFilter instance);
    partial void InsertArtworkFiltersXUser(ArtworkFiltersXUser instance);
    partial void UpdateArtworkFiltersXUser(ArtworkFiltersXUser instance);
    partial void DeleteArtworkFiltersXUser(ArtworkFiltersXUser instance);
    partial void InsertArtworkFilterValue(ArtworkFilterValue instance);
    partial void UpdateArtworkFilterValue(ArtworkFilterValue instance);
    partial void DeleteArtworkFilterValue(ArtworkFilterValue instance);
    partial void InsertArtworkKey(ArtworkKey instance);
    partial void UpdateArtworkKey(ArtworkKey instance);
    partial void DeleteArtworkKey(ArtworkKey instance);
    partial void InsertArtworkMetadata(ArtworkMetadata instance);
    partial void UpdateArtworkMetadata(ArtworkMetadata instance);
    partial void DeleteArtworkMetadata(ArtworkMetadata instance);
    partial void InsertArtworkRepresentation(ArtworkRepresentation instance);
    partial void UpdateArtworkRepresentation(ArtworkRepresentation instance);
    partial void DeleteArtworkRepresentation(ArtworkRepresentation instance);
    partial void InsertArtwork(Artwork instance);
    partial void UpdateArtwork(Artwork instance);
    partial void DeleteArtwork(Artwork instance);
    partial void InsertArtworksXUser(ArtworksXUser instance);
    partial void UpdateArtworksXUser(ArtworksXUser instance);
    partial void DeleteArtworksXUser(ArtworksXUser instance);
    partial void InsertAspNetUser(AspNetUser instance);
    partial void UpdateAspNetUser(AspNetUser instance);
    partial void DeleteAspNetUser(AspNetUser instance);
    partial void InsertConfigValue(ConfigValue instance);
    partial void UpdateConfigValue(ConfigValue instance);
    partial void DeleteConfigValue(ConfigValue instance);
    partial void InsertCreditAction(CreditAction instance);
    partial void UpdateCreditAction(CreditAction instance);
    partial void DeleteCreditAction(CreditAction instance);
    partial void InsertCreditsXUser(CreditsXUser instance);
    partial void UpdateCreditsXUser(CreditsXUser instance);
    partial void DeleteCreditsXUser(CreditsXUser instance);
    partial void InsertMuseumKey(MuseumKey instance);
    partial void UpdateMuseumKey(MuseumKey instance);
    partial void DeleteMuseumKey(MuseumKey instance);
    partial void InsertMuseumMetadata(MuseumMetadata instance);
    partial void UpdateMuseumMetadata(MuseumMetadata instance);
    partial void DeleteMuseumMetadata(MuseumMetadata instance);
    partial void InsertMuseumRating(MuseumRating instance);
    partial void UpdateMuseumRating(MuseumRating instance);
    partial void DeleteMuseumRating(MuseumRating instance);
    partial void InsertMuseum(Museum instance);
    partial void UpdateMuseum(Museum instance);
    partial void DeleteMuseum(Museum instance);
    partial void InsertMuseumsXArtwork(MuseumsXArtwork instance);
    partial void UpdateMuseumsXArtwork(MuseumsXArtwork instance);
    partial void DeleteMuseumsXArtwork(MuseumsXArtwork instance);
    partial void InsertMuseumUserVisit(MuseumUserVisit instance);
    partial void UpdateMuseumUserVisit(MuseumUserVisit instance);
    partial void DeleteMuseumUserVisit(MuseumUserVisit instance);
    #endregion
		
		public VirtualMuseumDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["VirtualMuseumConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public VirtualMuseumDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public VirtualMuseumDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public VirtualMuseumDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public VirtualMuseumDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Artist> Artists
		{
			get
			{
				return this.GetTable<Artist>();
			}
		}
		
		public System.Data.Linq.Table<PrivacyLevel> PrivacyLevels
		{
			get
			{
				return this.GetTable<PrivacyLevel>();
			}
		}
		
		public System.Data.Linq.Table<ArtistsXUser> ArtistsXUsers
		{
			get
			{
				return this.GetTable<ArtistsXUser>();
			}
		}
		
		public System.Data.Linq.Table<ArtworkFilter> ArtworkFilters
		{
			get
			{
				return this.GetTable<ArtworkFilter>();
			}
		}
		
		public System.Data.Linq.Table<ArtworkFiltersXUser> ArtworkFiltersXUsers
		{
			get
			{
				return this.GetTable<ArtworkFiltersXUser>();
			}
		}
		
		public System.Data.Linq.Table<ArtworkFilterValue> ArtworkFilterValues
		{
			get
			{
				return this.GetTable<ArtworkFilterValue>();
			}
		}
		
		public System.Data.Linq.Table<ArtworkKey> ArtworkKeys
		{
			get
			{
				return this.GetTable<ArtworkKey>();
			}
		}
		
		public System.Data.Linq.Table<ArtworkMetadata> ArtworkMetadatas
		{
			get
			{
				return this.GetTable<ArtworkMetadata>();
			}
		}
		
		public System.Data.Linq.Table<ArtworkRepresentation> ArtworkRepresentations
		{
			get
			{
				return this.GetTable<ArtworkRepresentation>();
			}
		}
		
		public System.Data.Linq.Table<Artwork> Artworks
		{
			get
			{
				return this.GetTable<Artwork>();
			}
		}
		
		public System.Data.Linq.Table<ArtworksXUser> ArtworksXUsers
		{
			get
			{
				return this.GetTable<ArtworksXUser>();
			}
		}
		
		public System.Data.Linq.Table<AspNetUser> AspNetUsers
		{
			get
			{
				return this.GetTable<AspNetUser>();
			}
		}
		
		public System.Data.Linq.Table<ConfigValue> ConfigValues
		{
			get
			{
				return this.GetTable<ConfigValue>();
			}
		}
		
		public System.Data.Linq.Table<CreditAction> CreditActions
		{
			get
			{
				return this.GetTable<CreditAction>();
			}
		}
		
		public System.Data.Linq.Table<CreditsXUser> CreditsXUsers
		{
			get
			{
				return this.GetTable<CreditsXUser>();
			}
		}
		
		public System.Data.Linq.Table<MuseumKey> MuseumKeys
		{
			get
			{
				return this.GetTable<MuseumKey>();
			}
		}
		
		public System.Data.Linq.Table<MuseumMetadata> MuseumMetadatas
		{
			get
			{
				return this.GetTable<MuseumMetadata>();
			}
		}
		
		public System.Data.Linq.Table<MuseumRating> MuseumRatings
		{
			get
			{
				return this.GetTable<MuseumRating>();
			}
		}
		
		public System.Data.Linq.Table<Museum> Museums
		{
			get
			{
				return this.GetTable<Museum>();
			}
		}
		
		public System.Data.Linq.Table<MuseumsXArtwork> MuseumsXArtworks
		{
			get
			{
				return this.GetTable<MuseumsXArtwork>();
			}
		}
		
		public System.Data.Linq.Table<MuseumUserVisit> MuseumUserVisits
		{
			get
			{
				return this.GetTable<MuseumUserVisit>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Artists")]
	public partial class Artist : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _ModiBy;
		
		private System.DateTime _ModiDate;
		
		private EntitySet<ArtworkFilter> _ArtworkFilters;
		
		private EntitySet<Artwork> _Artworks;
		
		private EntityRef<AspNetUser> _AspNetUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnModiByChanging(string value);
    partial void OnModiByChanged();
    partial void OnModiDateChanging(System.DateTime value);
    partial void OnModiDateChanged();
    #endregion
		
		public Artist()
		{
			this._ArtworkFilters = new EntitySet<ArtworkFilter>(new Action<ArtworkFilter>(this.attach_ArtworkFilters), new Action<ArtworkFilter>(this.detach_ArtworkFilters));
			this._Artworks = new EntitySet<Artwork>(new Action<Artwork>(this.attach_Artworks), new Action<Artwork>(this.detach_Artworks));
			this._AspNetUser = default(EntityRef<AspNetUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModiBy", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string ModiBy
		{
			get
			{
				return this._ModiBy;
			}
			set
			{
				if ((this._ModiBy != value))
				{
					if (this._AspNetUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModiByChanging(value);
					this.SendPropertyChanging();
					this._ModiBy = value;
					this.SendPropertyChanged("ModiBy");
					this.OnModiByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModiDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModiDate
		{
			get
			{
				return this._ModiDate;
			}
			set
			{
				if ((this._ModiDate != value))
				{
					this.OnModiDateChanging(value);
					this.SendPropertyChanging();
					this._ModiDate = value;
					this.SendPropertyChanged("ModiDate");
					this.OnModiDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Artist_ArtworkFilter", Storage="_ArtworkFilters", ThisKey="ID", OtherKey="ArtistID")]
		public EntitySet<ArtworkFilter> ArtworkFilters
		{
			get
			{
				return this._ArtworkFilters;
			}
			set
			{
				this._ArtworkFilters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Artist_Artwork", Storage="_Artworks", ThisKey="ID", OtherKey="ArtistID")]
		public EntitySet<Artwork> Artworks
		{
			get
			{
				return this._Artworks;
			}
			set
			{
				this._Artworks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_Artist", Storage="_AspNetUser", ThisKey="ModiBy", OtherKey="Id", IsForeignKey=true)]
		public AspNetUser AspNetUser
		{
			get
			{
				return this._AspNetUser.Entity;
			}
			set
			{
				AspNetUser previousValue = this._AspNetUser.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUser.Entity = null;
						previousValue.Artists.Remove(this);
					}
					this._AspNetUser.Entity = value;
					if ((value != null))
					{
						value.Artists.Add(this);
						this._ModiBy = value.Id;
					}
					else
					{
						this._ModiBy = default(string);
					}
					this.SendPropertyChanged("AspNetUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ArtworkFilters(ArtworkFilter entity)
		{
			this.SendPropertyChanging();
			entity.Artist = this;
		}
		
		private void detach_ArtworkFilters(ArtworkFilter entity)
		{
			this.SendPropertyChanging();
			entity.Artist = null;
		}
		
		private void attach_Artworks(Artwork entity)
		{
			this.SendPropertyChanging();
			entity.Artist = this;
		}
		
		private void detach_Artworks(Artwork entity)
		{
			this.SendPropertyChanging();
			entity.Artist = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PrivacyLevels")]
	public partial class PrivacyLevel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<Museum> _Museums;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public PrivacyLevel()
		{
			this._Museums = new EntitySet<Museum>(new Action<Museum>(this.attach_Museums), new Action<Museum>(this.detach_Museums));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PrivacyLevel_Museum", Storage="_Museums", ThisKey="ID", OtherKey="PrivacyLevelID")]
		public EntitySet<Museum> Museums
		{
			get
			{
				return this._Museums;
			}
			set
			{
				this._Museums.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Museums(Museum entity)
		{
			this.SendPropertyChanging();
			entity.PrivacyLevel = this;
		}
		
		private void detach_Museums(Museum entity)
		{
			this.SendPropertyChanging();
			entity.PrivacyLevel = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ArtistsXUsers")]
	public partial class ArtistsXUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UID;
		
		private int _ArtistID;
		
		private EntityRef<AspNetUser> _AspNetUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(string value);
    partial void OnUIDChanged();
    partial void OnArtistIDChanging(int value);
    partial void OnArtistIDChanged();
    #endregion
		
		public ArtistsXUser()
		{
			this._AspNetUser = default(EntityRef<AspNetUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					if (this._AspNetUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArtistID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ArtistID
		{
			get
			{
				return this._ArtistID;
			}
			set
			{
				if ((this._ArtistID != value))
				{
					this.OnArtistIDChanging(value);
					this.SendPropertyChanging();
					this._ArtistID = value;
					this.SendPropertyChanged("ArtistID");
					this.OnArtistIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_ArtistsXUser", Storage="_AspNetUser", ThisKey="UID", OtherKey="Id", IsForeignKey=true)]
		public AspNetUser AspNetUser
		{
			get
			{
				return this._AspNetUser.Entity;
			}
			set
			{
				AspNetUser previousValue = this._AspNetUser.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUser.Entity = null;
						previousValue.ArtistsXUsers.Remove(this);
					}
					this._AspNetUser.Entity = value;
					if ((value != null))
					{
						value.ArtistsXUsers.Add(this);
						this._UID = value.Id;
					}
					else
					{
						this._UID = default(string);
					}
					this.SendPropertyChanged("AspNetUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ArtworkFilters")]
	public partial class ArtworkFilter : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ArtistID;
		
		private System.Nullable<int> _ArtworkID;
		
		private string _ModiBy;
		
		private System.DateTime _ModiDate;
		
		private EntitySet<ArtworkFiltersXUser> _ArtworkFiltersXUsers;
		
		private EntitySet<ArtworkFilterValue> _ArtworkFilterValues;
		
		private EntityRef<Artist> _Artist;
		
		private EntityRef<AspNetUser> _AspNetUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnArtistIDChanging(int value);
    partial void OnArtistIDChanged();
    partial void OnArtworkIDChanging(System.Nullable<int> value);
    partial void OnArtworkIDChanged();
    partial void OnModiByChanging(string value);
    partial void OnModiByChanged();
    partial void OnModiDateChanging(System.DateTime value);
    partial void OnModiDateChanged();
    #endregion
		
		public ArtworkFilter()
		{
			this._ArtworkFiltersXUsers = new EntitySet<ArtworkFiltersXUser>(new Action<ArtworkFiltersXUser>(this.attach_ArtworkFiltersXUsers), new Action<ArtworkFiltersXUser>(this.detach_ArtworkFiltersXUsers));
			this._ArtworkFilterValues = new EntitySet<ArtworkFilterValue>(new Action<ArtworkFilterValue>(this.attach_ArtworkFilterValues), new Action<ArtworkFilterValue>(this.detach_ArtworkFilterValues));
			this._Artist = default(EntityRef<Artist>);
			this._AspNetUser = default(EntityRef<AspNetUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArtistID", DbType="Int NOT NULL")]
		public int ArtistID
		{
			get
			{
				return this._ArtistID;
			}
			set
			{
				if ((this._ArtistID != value))
				{
					if (this._Artist.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArtistIDChanging(value);
					this.SendPropertyChanging();
					this._ArtistID = value;
					this.SendPropertyChanged("ArtistID");
					this.OnArtistIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArtworkID", DbType="Int")]
		public System.Nullable<int> ArtworkID
		{
			get
			{
				return this._ArtworkID;
			}
			set
			{
				if ((this._ArtworkID != value))
				{
					this.OnArtworkIDChanging(value);
					this.SendPropertyChanging();
					this._ArtworkID = value;
					this.SendPropertyChanged("ArtworkID");
					this.OnArtworkIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModiBy", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string ModiBy
		{
			get
			{
				return this._ModiBy;
			}
			set
			{
				if ((this._ModiBy != value))
				{
					if (this._AspNetUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModiByChanging(value);
					this.SendPropertyChanging();
					this._ModiBy = value;
					this.SendPropertyChanged("ModiBy");
					this.OnModiByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModiDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModiDate
		{
			get
			{
				return this._ModiDate;
			}
			set
			{
				if ((this._ModiDate != value))
				{
					this.OnModiDateChanging(value);
					this.SendPropertyChanging();
					this._ModiDate = value;
					this.SendPropertyChanged("ModiDate");
					this.OnModiDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ArtworkFilter_ArtworkFiltersXUser", Storage="_ArtworkFiltersXUsers", ThisKey="ID", OtherKey="ArtworkFilterID")]
		public EntitySet<ArtworkFiltersXUser> ArtworkFiltersXUsers
		{
			get
			{
				return this._ArtworkFiltersXUsers;
			}
			set
			{
				this._ArtworkFiltersXUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ArtworkFilter_ArtworkFilterValue", Storage="_ArtworkFilterValues", ThisKey="ID", OtherKey="ArtworkFilterID")]
		public EntitySet<ArtworkFilterValue> ArtworkFilterValues
		{
			get
			{
				return this._ArtworkFilterValues;
			}
			set
			{
				this._ArtworkFilterValues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Artist_ArtworkFilter", Storage="_Artist", ThisKey="ArtistID", OtherKey="ID", IsForeignKey=true)]
		public Artist Artist
		{
			get
			{
				return this._Artist.Entity;
			}
			set
			{
				Artist previousValue = this._Artist.Entity;
				if (((previousValue != value) 
							|| (this._Artist.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Artist.Entity = null;
						previousValue.ArtworkFilters.Remove(this);
					}
					this._Artist.Entity = value;
					if ((value != null))
					{
						value.ArtworkFilters.Add(this);
						this._ArtistID = value.ID;
					}
					else
					{
						this._ArtistID = default(int);
					}
					this.SendPropertyChanged("Artist");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_ArtworkFilter", Storage="_AspNetUser", ThisKey="ModiBy", OtherKey="Id", IsForeignKey=true)]
		public AspNetUser AspNetUser
		{
			get
			{
				return this._AspNetUser.Entity;
			}
			set
			{
				AspNetUser previousValue = this._AspNetUser.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUser.Entity = null;
						previousValue.ArtworkFilters.Remove(this);
					}
					this._AspNetUser.Entity = value;
					if ((value != null))
					{
						value.ArtworkFilters.Add(this);
						this._ModiBy = value.Id;
					}
					else
					{
						this._ModiBy = default(string);
					}
					this.SendPropertyChanged("AspNetUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ArtworkFiltersXUsers(ArtworkFiltersXUser entity)
		{
			this.SendPropertyChanging();
			entity.ArtworkFilter = this;
		}
		
		private void detach_ArtworkFiltersXUsers(ArtworkFiltersXUser entity)
		{
			this.SendPropertyChanging();
			entity.ArtworkFilter = null;
		}
		
		private void attach_ArtworkFilterValues(ArtworkFilterValue entity)
		{
			this.SendPropertyChanging();
			entity.ArtworkFilter = this;
		}
		
		private void detach_ArtworkFilterValues(ArtworkFilterValue entity)
		{
			this.SendPropertyChanging();
			entity.ArtworkFilter = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ArtworkFiltersXUsers")]
	public partial class ArtworkFiltersXUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UID;
		
		private int _ArtworkFilterID;
		
		private EntityRef<ArtworkFilter> _ArtworkFilter;
		
		private EntityRef<AspNetUser> _AspNetUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(string value);
    partial void OnUIDChanged();
    partial void OnArtworkFilterIDChanging(int value);
    partial void OnArtworkFilterIDChanged();
    #endregion
		
		public ArtworkFiltersXUser()
		{
			this._ArtworkFilter = default(EntityRef<ArtworkFilter>);
			this._AspNetUser = default(EntityRef<AspNetUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					if (this._AspNetUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArtworkFilterID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ArtworkFilterID
		{
			get
			{
				return this._ArtworkFilterID;
			}
			set
			{
				if ((this._ArtworkFilterID != value))
				{
					if (this._ArtworkFilter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArtworkFilterIDChanging(value);
					this.SendPropertyChanging();
					this._ArtworkFilterID = value;
					this.SendPropertyChanged("ArtworkFilterID");
					this.OnArtworkFilterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ArtworkFilter_ArtworkFiltersXUser", Storage="_ArtworkFilter", ThisKey="ArtworkFilterID", OtherKey="ID", IsForeignKey=true)]
		public ArtworkFilter ArtworkFilter
		{
			get
			{
				return this._ArtworkFilter.Entity;
			}
			set
			{
				ArtworkFilter previousValue = this._ArtworkFilter.Entity;
				if (((previousValue != value) 
							|| (this._ArtworkFilter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ArtworkFilter.Entity = null;
						previousValue.ArtworkFiltersXUsers.Remove(this);
					}
					this._ArtworkFilter.Entity = value;
					if ((value != null))
					{
						value.ArtworkFiltersXUsers.Add(this);
						this._ArtworkFilterID = value.ID;
					}
					else
					{
						this._ArtworkFilterID = default(int);
					}
					this.SendPropertyChanged("ArtworkFilter");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_ArtworkFiltersXUser", Storage="_AspNetUser", ThisKey="UID", OtherKey="Id", IsForeignKey=true)]
		public AspNetUser AspNetUser
		{
			get
			{
				return this._AspNetUser.Entity;
			}
			set
			{
				AspNetUser previousValue = this._AspNetUser.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUser.Entity = null;
						previousValue.ArtworkFiltersXUsers.Remove(this);
					}
					this._AspNetUser.Entity = value;
					if ((value != null))
					{
						value.ArtworkFiltersXUsers.Add(this);
						this._UID = value.Id;
					}
					else
					{
						this._UID = default(string);
					}
					this.SendPropertyChanged("AspNetUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ArtworkFilterValues")]
	public partial class ArtworkFilterValue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ArtworkFilterID;
		
		private int _ArtworkKeyID;
		
		private string _Value;
		
		private EntityRef<ArtworkFilter> _ArtworkFilter;
		
		private EntityRef<ArtworkKey> _ArtworkKey;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnArtworkFilterIDChanging(int value);
    partial void OnArtworkFilterIDChanged();
    partial void OnArtworkKeyIDChanging(int value);
    partial void OnArtworkKeyIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public ArtworkFilterValue()
		{
			this._ArtworkFilter = default(EntityRef<ArtworkFilter>);
			this._ArtworkKey = default(EntityRef<ArtworkKey>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArtworkFilterID", DbType="Int NOT NULL")]
		public int ArtworkFilterID
		{
			get
			{
				return this._ArtworkFilterID;
			}
			set
			{
				if ((this._ArtworkFilterID != value))
				{
					if (this._ArtworkFilter.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArtworkFilterIDChanging(value);
					this.SendPropertyChanging();
					this._ArtworkFilterID = value;
					this.SendPropertyChanged("ArtworkFilterID");
					this.OnArtworkFilterIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArtworkKeyID", DbType="Int NOT NULL")]
		public int ArtworkKeyID
		{
			get
			{
				return this._ArtworkKeyID;
			}
			set
			{
				if ((this._ArtworkKeyID != value))
				{
					if (this._ArtworkKey.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArtworkKeyIDChanging(value);
					this.SendPropertyChanging();
					this._ArtworkKeyID = value;
					this.SendPropertyChanged("ArtworkKeyID");
					this.OnArtworkKeyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ArtworkFilter_ArtworkFilterValue", Storage="_ArtworkFilter", ThisKey="ArtworkFilterID", OtherKey="ID", IsForeignKey=true)]
		public ArtworkFilter ArtworkFilter
		{
			get
			{
				return this._ArtworkFilter.Entity;
			}
			set
			{
				ArtworkFilter previousValue = this._ArtworkFilter.Entity;
				if (((previousValue != value) 
							|| (this._ArtworkFilter.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ArtworkFilter.Entity = null;
						previousValue.ArtworkFilterValues.Remove(this);
					}
					this._ArtworkFilter.Entity = value;
					if ((value != null))
					{
						value.ArtworkFilterValues.Add(this);
						this._ArtworkFilterID = value.ID;
					}
					else
					{
						this._ArtworkFilterID = default(int);
					}
					this.SendPropertyChanged("ArtworkFilter");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ArtworkKey_ArtworkFilterValue", Storage="_ArtworkKey", ThisKey="ArtworkKeyID", OtherKey="ID", IsForeignKey=true)]
		public ArtworkKey ArtworkKey
		{
			get
			{
				return this._ArtworkKey.Entity;
			}
			set
			{
				ArtworkKey previousValue = this._ArtworkKey.Entity;
				if (((previousValue != value) 
							|| (this._ArtworkKey.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ArtworkKey.Entity = null;
						previousValue.ArtworkFilterValues.Remove(this);
					}
					this._ArtworkKey.Entity = value;
					if ((value != null))
					{
						value.ArtworkFilterValues.Add(this);
						this._ArtworkKeyID = value.ID;
					}
					else
					{
						this._ArtworkKeyID = default(int);
					}
					this.SendPropertyChanged("ArtworkKey");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ArtworkKeys")]
	public partial class ArtworkKey : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _name;
		
		private EntitySet<ArtworkFilterValue> _ArtworkFilterValues;
		
		private EntitySet<ArtworkMetadata> _ArtworkMetadatas;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public ArtworkKey()
		{
			this._ArtworkFilterValues = new EntitySet<ArtworkFilterValue>(new Action<ArtworkFilterValue>(this.attach_ArtworkFilterValues), new Action<ArtworkFilterValue>(this.detach_ArtworkFilterValues));
			this._ArtworkMetadatas = new EntitySet<ArtworkMetadata>(new Action<ArtworkMetadata>(this.attach_ArtworkMetadatas), new Action<ArtworkMetadata>(this.detach_ArtworkMetadatas));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ArtworkKey_ArtworkFilterValue", Storage="_ArtworkFilterValues", ThisKey="ID", OtherKey="ArtworkKeyID")]
		public EntitySet<ArtworkFilterValue> ArtworkFilterValues
		{
			get
			{
				return this._ArtworkFilterValues;
			}
			set
			{
				this._ArtworkFilterValues.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ArtworkKey_ArtworkMetadata", Storage="_ArtworkMetadatas", ThisKey="ID", OtherKey="KeyID")]
		public EntitySet<ArtworkMetadata> ArtworkMetadatas
		{
			get
			{
				return this._ArtworkMetadatas;
			}
			set
			{
				this._ArtworkMetadatas.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ArtworkFilterValues(ArtworkFilterValue entity)
		{
			this.SendPropertyChanging();
			entity.ArtworkKey = this;
		}
		
		private void detach_ArtworkFilterValues(ArtworkFilterValue entity)
		{
			this.SendPropertyChanging();
			entity.ArtworkKey = null;
		}
		
		private void attach_ArtworkMetadatas(ArtworkMetadata entity)
		{
			this.SendPropertyChanging();
			entity.ArtworkKey = this;
		}
		
		private void detach_ArtworkMetadatas(ArtworkMetadata entity)
		{
			this.SendPropertyChanging();
			entity.ArtworkKey = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ArtworkMetadata")]
	public partial class ArtworkMetadata : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ArtworkID;
		
		private int _KeyID;
		
		private string _Value;
		
		private string _ModiBy;
		
		private System.DateTime _ModiDate;
		
		private EntityRef<ArtworkMetadata> _ArtworkMetadata2;
		
		private EntityRef<ArtworkKey> _ArtworkKey;
		
		private EntityRef<ArtworkMetadata> _ArtworkMetadata1;
		
		private EntityRef<Artwork> _Artwork;
		
		private EntityRef<AspNetUser> _AspNetUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnArtworkIDChanging(int value);
    partial void OnArtworkIDChanged();
    partial void OnKeyIDChanging(int value);
    partial void OnKeyIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnModiByChanging(string value);
    partial void OnModiByChanged();
    partial void OnModiDateChanging(System.DateTime value);
    partial void OnModiDateChanged();
    #endregion
		
		public ArtworkMetadata()
		{
			this._ArtworkMetadata2 = default(EntityRef<ArtworkMetadata>);
			this._ArtworkKey = default(EntityRef<ArtworkKey>);
			this._ArtworkMetadata1 = default(EntityRef<ArtworkMetadata>);
			this._Artwork = default(EntityRef<Artwork>);
			this._AspNetUser = default(EntityRef<AspNetUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if (this._ArtworkMetadata1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArtworkID", DbType="Int NOT NULL")]
		public int ArtworkID
		{
			get
			{
				return this._ArtworkID;
			}
			set
			{
				if ((this._ArtworkID != value))
				{
					if (this._Artwork.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArtworkIDChanging(value);
					this.SendPropertyChanging();
					this._ArtworkID = value;
					this.SendPropertyChanged("ArtworkID");
					this.OnArtworkIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KeyID", DbType="Int NOT NULL")]
		public int KeyID
		{
			get
			{
				return this._KeyID;
			}
			set
			{
				if ((this._KeyID != value))
				{
					if (this._ArtworkKey.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnKeyIDChanging(value);
					this.SendPropertyChanging();
					this._KeyID = value;
					this.SendPropertyChanged("KeyID");
					this.OnKeyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModiBy", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string ModiBy
		{
			get
			{
				return this._ModiBy;
			}
			set
			{
				if ((this._ModiBy != value))
				{
					if (this._AspNetUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModiByChanging(value);
					this.SendPropertyChanging();
					this._ModiBy = value;
					this.SendPropertyChanged("ModiBy");
					this.OnModiByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModiDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModiDate
		{
			get
			{
				return this._ModiDate;
			}
			set
			{
				if ((this._ModiDate != value))
				{
					this.OnModiDateChanging(value);
					this.SendPropertyChanging();
					this._ModiDate = value;
					this.SendPropertyChanged("ModiDate");
					this.OnModiDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ArtworkMetadata_ArtworkMetadata", Storage="_ArtworkMetadata2", ThisKey="ID", OtherKey="ID", IsUnique=true, IsForeignKey=false)]
		public ArtworkMetadata ArtworkMetadata2
		{
			get
			{
				return this._ArtworkMetadata2.Entity;
			}
			set
			{
				ArtworkMetadata previousValue = this._ArtworkMetadata2.Entity;
				if (((previousValue != value) 
							|| (this._ArtworkMetadata2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ArtworkMetadata2.Entity = null;
						previousValue.ArtworkMetadata1 = null;
					}
					this._ArtworkMetadata2.Entity = value;
					if ((value != null))
					{
						value.ArtworkMetadata1 = this;
					}
					this.SendPropertyChanged("ArtworkMetadata2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ArtworkKey_ArtworkMetadata", Storage="_ArtworkKey", ThisKey="KeyID", OtherKey="ID", IsForeignKey=true)]
		public ArtworkKey ArtworkKey
		{
			get
			{
				return this._ArtworkKey.Entity;
			}
			set
			{
				ArtworkKey previousValue = this._ArtworkKey.Entity;
				if (((previousValue != value) 
							|| (this._ArtworkKey.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ArtworkKey.Entity = null;
						previousValue.ArtworkMetadatas.Remove(this);
					}
					this._ArtworkKey.Entity = value;
					if ((value != null))
					{
						value.ArtworkMetadatas.Add(this);
						this._KeyID = value.ID;
					}
					else
					{
						this._KeyID = default(int);
					}
					this.SendPropertyChanged("ArtworkKey");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ArtworkMetadata_ArtworkMetadata", Storage="_ArtworkMetadata1", ThisKey="ID", OtherKey="ID", IsForeignKey=true)]
		public ArtworkMetadata ArtworkMetadata1
		{
			get
			{
				return this._ArtworkMetadata1.Entity;
			}
			set
			{
				ArtworkMetadata previousValue = this._ArtworkMetadata1.Entity;
				if (((previousValue != value) 
							|| (this._ArtworkMetadata1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ArtworkMetadata1.Entity = null;
						previousValue.ArtworkMetadata2 = null;
					}
					this._ArtworkMetadata1.Entity = value;
					if ((value != null))
					{
						value.ArtworkMetadata2 = this;
						this._ID = value.ID;
					}
					else
					{
						this._ID = default(int);
					}
					this.SendPropertyChanged("ArtworkMetadata1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Artwork_ArtworkMetadata", Storage="_Artwork", ThisKey="ArtworkID", OtherKey="ID", IsForeignKey=true)]
		public Artwork Artwork
		{
			get
			{
				return this._Artwork.Entity;
			}
			set
			{
				Artwork previousValue = this._Artwork.Entity;
				if (((previousValue != value) 
							|| (this._Artwork.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Artwork.Entity = null;
						previousValue.ArtworkMetadatas.Remove(this);
					}
					this._Artwork.Entity = value;
					if ((value != null))
					{
						value.ArtworkMetadatas.Add(this);
						this._ArtworkID = value.ID;
					}
					else
					{
						this._ArtworkID = default(int);
					}
					this.SendPropertyChanged("Artwork");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_ArtworkMetadata", Storage="_AspNetUser", ThisKey="ModiBy", OtherKey="Id", IsForeignKey=true)]
		public AspNetUser AspNetUser
		{
			get
			{
				return this._AspNetUser.Entity;
			}
			set
			{
				AspNetUser previousValue = this._AspNetUser.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUser.Entity = null;
						previousValue.ArtworkMetadatas.Remove(this);
					}
					this._AspNetUser.Entity = value;
					if ((value != null))
					{
						value.ArtworkMetadatas.Add(this);
						this._ModiBy = value.Id;
					}
					else
					{
						this._ModiBy = default(string);
					}
					this.SendPropertyChanged("AspNetUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ArtworkRepresentations")]
	public partial class ArtworkRepresentation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ArtworkID;
		
		private int _Size;
		
		private System.Guid _DataGUID;
		
		private System.Data.Linq.Binary _Data;
		
		private EntityRef<Artwork> _Artwork;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnArtworkIDChanging(int value);
    partial void OnArtworkIDChanged();
    partial void OnSizeChanging(int value);
    partial void OnSizeChanged();
    partial void OnDataGUIDChanging(System.Guid value);
    partial void OnDataGUIDChanged();
    partial void OnDataChanging(System.Data.Linq.Binary value);
    partial void OnDataChanged();
    #endregion
		
		public ArtworkRepresentation()
		{
			this._Artwork = default(EntityRef<Artwork>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArtworkID", DbType="Int NOT NULL")]
		public int ArtworkID
		{
			get
			{
				return this._ArtworkID;
			}
			set
			{
				if ((this._ArtworkID != value))
				{
					if (this._Artwork.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArtworkIDChanging(value);
					this.SendPropertyChanging();
					this._ArtworkID = value;
					this.SendPropertyChanged("ArtworkID");
					this.OnArtworkIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Size", DbType="Int NOT NULL")]
		public int Size
		{
			get
			{
				return this._Size;
			}
			set
			{
				if ((this._Size != value))
				{
					this.OnSizeChanging(value);
					this.SendPropertyChanging();
					this._Size = value;
					this.SendPropertyChanged("Size");
					this.OnSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataGUID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid DataGUID
		{
			get
			{
				return this._DataGUID;
			}
			set
			{
				if ((this._DataGUID != value))
				{
					this.OnDataGUIDChanging(value);
					this.SendPropertyChanging();
					this._DataGUID = value;
					this.SendPropertyChanged("DataGUID");
					this.OnDataGUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Data", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Artwork_ArtworkRepresentation", Storage="_Artwork", ThisKey="ArtworkID", OtherKey="ID", IsForeignKey=true)]
		public Artwork Artwork
		{
			get
			{
				return this._Artwork.Entity;
			}
			set
			{
				Artwork previousValue = this._Artwork.Entity;
				if (((previousValue != value) 
							|| (this._Artwork.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Artwork.Entity = null;
						previousValue.ArtworkRepresentations.Remove(this);
					}
					this._Artwork.Entity = value;
					if ((value != null))
					{
						value.ArtworkRepresentations.Add(this);
						this._ArtworkID = value.ID;
					}
					else
					{
						this._ArtworkID = default(int);
					}
					this.SendPropertyChanged("Artwork");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Artworks")]
	public partial class Artwork : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _name;
		
		private int _ArtistID;
		
		private int _Collected;
		
		private string _ModiBy;
		
		private System.DateTime _ModiDate;
		
		private EntitySet<ArtworkMetadata> _ArtworkMetadatas;
		
		private EntitySet<ArtworkRepresentation> _ArtworkRepresentations;
		
		private EntitySet<ArtworksXUser> _ArtworksXUsers;
		
		private EntitySet<MuseumsXArtwork> _MuseumsXArtworks;
		
		private EntityRef<Artist> _Artist;
		
		private EntityRef<AspNetUser> _AspNetUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnArtistIDChanging(int value);
    partial void OnArtistIDChanged();
    partial void OnCollectedChanging(int value);
    partial void OnCollectedChanged();
    partial void OnModiByChanging(string value);
    partial void OnModiByChanged();
    partial void OnModiDateChanging(System.DateTime value);
    partial void OnModiDateChanged();
    #endregion
		
		public Artwork()
		{
			this._ArtworkMetadatas = new EntitySet<ArtworkMetadata>(new Action<ArtworkMetadata>(this.attach_ArtworkMetadatas), new Action<ArtworkMetadata>(this.detach_ArtworkMetadatas));
			this._ArtworkRepresentations = new EntitySet<ArtworkRepresentation>(new Action<ArtworkRepresentation>(this.attach_ArtworkRepresentations), new Action<ArtworkRepresentation>(this.detach_ArtworkRepresentations));
			this._ArtworksXUsers = new EntitySet<ArtworksXUser>(new Action<ArtworksXUser>(this.attach_ArtworksXUsers), new Action<ArtworksXUser>(this.detach_ArtworksXUsers));
			this._MuseumsXArtworks = new EntitySet<MuseumsXArtwork>(new Action<MuseumsXArtwork>(this.attach_MuseumsXArtworks), new Action<MuseumsXArtwork>(this.detach_MuseumsXArtworks));
			this._Artist = default(EntityRef<Artist>);
			this._AspNetUser = default(EntityRef<AspNetUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArtistID", DbType="Int NOT NULL")]
		public int ArtistID
		{
			get
			{
				return this._ArtistID;
			}
			set
			{
				if ((this._ArtistID != value))
				{
					if (this._Artist.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArtistIDChanging(value);
					this.SendPropertyChanging();
					this._ArtistID = value;
					this.SendPropertyChanged("ArtistID");
					this.OnArtistIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Collected", DbType="Int NOT NULL")]
		public int Collected
		{
			get
			{
				return this._Collected;
			}
			set
			{
				if ((this._Collected != value))
				{
					this.OnCollectedChanging(value);
					this.SendPropertyChanging();
					this._Collected = value;
					this.SendPropertyChanged("Collected");
					this.OnCollectedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModiBy", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string ModiBy
		{
			get
			{
				return this._ModiBy;
			}
			set
			{
				if ((this._ModiBy != value))
				{
					if (this._AspNetUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModiByChanging(value);
					this.SendPropertyChanging();
					this._ModiBy = value;
					this.SendPropertyChanged("ModiBy");
					this.OnModiByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModiDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModiDate
		{
			get
			{
				return this._ModiDate;
			}
			set
			{
				if ((this._ModiDate != value))
				{
					this.OnModiDateChanging(value);
					this.SendPropertyChanging();
					this._ModiDate = value;
					this.SendPropertyChanged("ModiDate");
					this.OnModiDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Artwork_ArtworkMetadata", Storage="_ArtworkMetadatas", ThisKey="ID", OtherKey="ArtworkID")]
		public EntitySet<ArtworkMetadata> ArtworkMetadatas
		{
			get
			{
				return this._ArtworkMetadatas;
			}
			set
			{
				this._ArtworkMetadatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Artwork_ArtworkRepresentation", Storage="_ArtworkRepresentations", ThisKey="ID", OtherKey="ArtworkID")]
		public EntitySet<ArtworkRepresentation> ArtworkRepresentations
		{
			get
			{
				return this._ArtworkRepresentations;
			}
			set
			{
				this._ArtworkRepresentations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Artwork_ArtworksXUser", Storage="_ArtworksXUsers", ThisKey="ID", OtherKey="ArtworkID")]
		public EntitySet<ArtworksXUser> ArtworksXUsers
		{
			get
			{
				return this._ArtworksXUsers;
			}
			set
			{
				this._ArtworksXUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Artwork_MuseumsXArtwork", Storage="_MuseumsXArtworks", ThisKey="ID", OtherKey="ArtworkID")]
		public EntitySet<MuseumsXArtwork> MuseumsXArtworks
		{
			get
			{
				return this._MuseumsXArtworks;
			}
			set
			{
				this._MuseumsXArtworks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Artist_Artwork", Storage="_Artist", ThisKey="ArtistID", OtherKey="ID", IsForeignKey=true)]
		public Artist Artist
		{
			get
			{
				return this._Artist.Entity;
			}
			set
			{
				Artist previousValue = this._Artist.Entity;
				if (((previousValue != value) 
							|| (this._Artist.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Artist.Entity = null;
						previousValue.Artworks.Remove(this);
					}
					this._Artist.Entity = value;
					if ((value != null))
					{
						value.Artworks.Add(this);
						this._ArtistID = value.ID;
					}
					else
					{
						this._ArtistID = default(int);
					}
					this.SendPropertyChanged("Artist");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_Artwork", Storage="_AspNetUser", ThisKey="ModiBy", OtherKey="Id", IsForeignKey=true)]
		public AspNetUser AspNetUser
		{
			get
			{
				return this._AspNetUser.Entity;
			}
			set
			{
				AspNetUser previousValue = this._AspNetUser.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUser.Entity = null;
						previousValue.Artworks.Remove(this);
					}
					this._AspNetUser.Entity = value;
					if ((value != null))
					{
						value.Artworks.Add(this);
						this._ModiBy = value.Id;
					}
					else
					{
						this._ModiBy = default(string);
					}
					this.SendPropertyChanged("AspNetUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ArtworkMetadatas(ArtworkMetadata entity)
		{
			this.SendPropertyChanging();
			entity.Artwork = this;
		}
		
		private void detach_ArtworkMetadatas(ArtworkMetadata entity)
		{
			this.SendPropertyChanging();
			entity.Artwork = null;
		}
		
		private void attach_ArtworkRepresentations(ArtworkRepresentation entity)
		{
			this.SendPropertyChanging();
			entity.Artwork = this;
		}
		
		private void detach_ArtworkRepresentations(ArtworkRepresentation entity)
		{
			this.SendPropertyChanging();
			entity.Artwork = null;
		}
		
		private void attach_ArtworksXUsers(ArtworksXUser entity)
		{
			this.SendPropertyChanging();
			entity.Artwork = this;
		}
		
		private void detach_ArtworksXUsers(ArtworksXUser entity)
		{
			this.SendPropertyChanging();
			entity.Artwork = null;
		}
		
		private void attach_MuseumsXArtworks(MuseumsXArtwork entity)
		{
			this.SendPropertyChanging();
			entity.Artwork = this;
		}
		
		private void detach_MuseumsXArtworks(MuseumsXArtwork entity)
		{
			this.SendPropertyChanging();
			entity.Artwork = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ArtworksXUsers")]
	public partial class ArtworksXUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UID;
		
		private int _ArtworkID;
		
		private EntityRef<Artwork> _Artwork;
		
		private EntityRef<AspNetUser> _AspNetUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(string value);
    partial void OnUIDChanged();
    partial void OnArtworkIDChanging(int value);
    partial void OnArtworkIDChanged();
    #endregion
		
		public ArtworksXUser()
		{
			this._Artwork = default(EntityRef<Artwork>);
			this._AspNetUser = default(EntityRef<AspNetUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					if (this._AspNetUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArtworkID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ArtworkID
		{
			get
			{
				return this._ArtworkID;
			}
			set
			{
				if ((this._ArtworkID != value))
				{
					if (this._Artwork.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArtworkIDChanging(value);
					this.SendPropertyChanging();
					this._ArtworkID = value;
					this.SendPropertyChanged("ArtworkID");
					this.OnArtworkIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Artwork_ArtworksXUser", Storage="_Artwork", ThisKey="ArtworkID", OtherKey="ID", IsForeignKey=true)]
		public Artwork Artwork
		{
			get
			{
				return this._Artwork.Entity;
			}
			set
			{
				Artwork previousValue = this._Artwork.Entity;
				if (((previousValue != value) 
							|| (this._Artwork.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Artwork.Entity = null;
						previousValue.ArtworksXUsers.Remove(this);
					}
					this._Artwork.Entity = value;
					if ((value != null))
					{
						value.ArtworksXUsers.Add(this);
						this._ArtworkID = value.ID;
					}
					else
					{
						this._ArtworkID = default(int);
					}
					this.SendPropertyChanged("Artwork");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_ArtworksXUser", Storage="_AspNetUser", ThisKey="UID", OtherKey="Id", IsForeignKey=true)]
		public AspNetUser AspNetUser
		{
			get
			{
				return this._AspNetUser.Entity;
			}
			set
			{
				AspNetUser previousValue = this._AspNetUser.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUser.Entity = null;
						previousValue.ArtworksXUsers.Remove(this);
					}
					this._AspNetUser.Entity = value;
					if ((value != null))
					{
						value.ArtworksXUsers.Add(this);
						this._UID = value.Id;
					}
					else
					{
						this._UID = default(string);
					}
					this.SendPropertyChanged("AspNetUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetUsers")]
	public partial class AspNetUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private string _Email;
		
		private bool _EmailConfirmed;
		
		private string _PasswordHash;
		
		private string _SecurityStamp;
		
		private string _PhoneNumber;
		
		private bool _PhoneNumberConfirmed;
		
		private bool _TwoFactorEnabled;
		
		private System.Nullable<System.DateTime> _LockoutEndDateUtc;
		
		private bool _LockoutEnabled;
		
		private int _AccessFailedCount;
		
		private string _UserName;
		
		private EntitySet<Artist> _Artists;
		
		private EntitySet<ArtistsXUser> _ArtistsXUsers;
		
		private EntitySet<ArtworkFilter> _ArtworkFilters;
		
		private EntitySet<ArtworkFiltersXUser> _ArtworkFiltersXUsers;
		
		private EntitySet<ArtworkMetadata> _ArtworkMetadatas;
		
		private EntitySet<Artwork> _Artworks;
		
		private EntitySet<ArtworksXUser> _ArtworksXUsers;
		
		private EntityRef<CreditsXUser> _CreditsXUser;
		
		private EntitySet<MuseumKey> _MuseumKeys;
		
		private EntitySet<MuseumMetadata> _MuseumMetadatas;
		
		private EntitySet<Museum> _Museums;
		
		private EntitySet<Museum> _Museums1;
		
		private EntitySet<MuseumUserVisit> _MuseumUserVisits;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnEmailConfirmedChanging(bool value);
    partial void OnEmailConfirmedChanged();
    partial void OnPasswordHashChanging(string value);
    partial void OnPasswordHashChanged();
    partial void OnSecurityStampChanging(string value);
    partial void OnSecurityStampChanged();
    partial void OnPhoneNumberChanging(string value);
    partial void OnPhoneNumberChanged();
    partial void OnPhoneNumberConfirmedChanging(bool value);
    partial void OnPhoneNumberConfirmedChanged();
    partial void OnTwoFactorEnabledChanging(bool value);
    partial void OnTwoFactorEnabledChanged();
    partial void OnLockoutEndDateUtcChanging(System.Nullable<System.DateTime> value);
    partial void OnLockoutEndDateUtcChanged();
    partial void OnLockoutEnabledChanging(bool value);
    partial void OnLockoutEnabledChanged();
    partial void OnAccessFailedCountChanging(int value);
    partial void OnAccessFailedCountChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    #endregion
		
		public AspNetUser()
		{
			this._Artists = new EntitySet<Artist>(new Action<Artist>(this.attach_Artists), new Action<Artist>(this.detach_Artists));
			this._ArtistsXUsers = new EntitySet<ArtistsXUser>(new Action<ArtistsXUser>(this.attach_ArtistsXUsers), new Action<ArtistsXUser>(this.detach_ArtistsXUsers));
			this._ArtworkFilters = new EntitySet<ArtworkFilter>(new Action<ArtworkFilter>(this.attach_ArtworkFilters), new Action<ArtworkFilter>(this.detach_ArtworkFilters));
			this._ArtworkFiltersXUsers = new EntitySet<ArtworkFiltersXUser>(new Action<ArtworkFiltersXUser>(this.attach_ArtworkFiltersXUsers), new Action<ArtworkFiltersXUser>(this.detach_ArtworkFiltersXUsers));
			this._ArtworkMetadatas = new EntitySet<ArtworkMetadata>(new Action<ArtworkMetadata>(this.attach_ArtworkMetadatas), new Action<ArtworkMetadata>(this.detach_ArtworkMetadatas));
			this._Artworks = new EntitySet<Artwork>(new Action<Artwork>(this.attach_Artworks), new Action<Artwork>(this.detach_Artworks));
			this._ArtworksXUsers = new EntitySet<ArtworksXUser>(new Action<ArtworksXUser>(this.attach_ArtworksXUsers), new Action<ArtworksXUser>(this.detach_ArtworksXUsers));
			this._CreditsXUser = default(EntityRef<CreditsXUser>);
			this._MuseumKeys = new EntitySet<MuseumKey>(new Action<MuseumKey>(this.attach_MuseumKeys), new Action<MuseumKey>(this.detach_MuseumKeys));
			this._MuseumMetadatas = new EntitySet<MuseumMetadata>(new Action<MuseumMetadata>(this.attach_MuseumMetadatas), new Action<MuseumMetadata>(this.detach_MuseumMetadatas));
			this._Museums = new EntitySet<Museum>(new Action<Museum>(this.attach_Museums), new Action<Museum>(this.detach_Museums));
			this._Museums1 = new EntitySet<Museum>(new Action<Museum>(this.attach_Museums1), new Action<Museum>(this.detach_Museums1));
			this._MuseumUserVisits = new EntitySet<MuseumUserVisit>(new Action<MuseumUserVisit>(this.attach_MuseumUserVisits), new Action<MuseumUserVisit>(this.detach_MuseumUserVisits));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(256)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailConfirmed", DbType="Bit NOT NULL")]
		public bool EmailConfirmed
		{
			get
			{
				return this._EmailConfirmed;
			}
			set
			{
				if ((this._EmailConfirmed != value))
				{
					this.OnEmailConfirmedChanging(value);
					this.SendPropertyChanging();
					this._EmailConfirmed = value;
					this.SendPropertyChanged("EmailConfirmed");
					this.OnEmailConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordHash", DbType="NVarChar(MAX)")]
		public string PasswordHash
		{
			get
			{
				return this._PasswordHash;
			}
			set
			{
				if ((this._PasswordHash != value))
				{
					this.OnPasswordHashChanging(value);
					this.SendPropertyChanging();
					this._PasswordHash = value;
					this.SendPropertyChanged("PasswordHash");
					this.OnPasswordHashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecurityStamp", DbType="NVarChar(MAX)")]
		public string SecurityStamp
		{
			get
			{
				return this._SecurityStamp;
			}
			set
			{
				if ((this._SecurityStamp != value))
				{
					this.OnSecurityStampChanging(value);
					this.SendPropertyChanging();
					this._SecurityStamp = value;
					this.SendPropertyChanged("SecurityStamp");
					this.OnSecurityStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumber", DbType="NVarChar(MAX)")]
		public string PhoneNumber
		{
			get
			{
				return this._PhoneNumber;
			}
			set
			{
				if ((this._PhoneNumber != value))
				{
					this.OnPhoneNumberChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumber = value;
					this.SendPropertyChanged("PhoneNumber");
					this.OnPhoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneNumberConfirmed", DbType="Bit NOT NULL")]
		public bool PhoneNumberConfirmed
		{
			get
			{
				return this._PhoneNumberConfirmed;
			}
			set
			{
				if ((this._PhoneNumberConfirmed != value))
				{
					this.OnPhoneNumberConfirmedChanging(value);
					this.SendPropertyChanging();
					this._PhoneNumberConfirmed = value;
					this.SendPropertyChanged("PhoneNumberConfirmed");
					this.OnPhoneNumberConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TwoFactorEnabled", DbType="Bit NOT NULL")]
		public bool TwoFactorEnabled
		{
			get
			{
				return this._TwoFactorEnabled;
			}
			set
			{
				if ((this._TwoFactorEnabled != value))
				{
					this.OnTwoFactorEnabledChanging(value);
					this.SendPropertyChanging();
					this._TwoFactorEnabled = value;
					this.SendPropertyChanged("TwoFactorEnabled");
					this.OnTwoFactorEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LockoutEndDateUtc", DbType="DateTime")]
		public System.Nullable<System.DateTime> LockoutEndDateUtc
		{
			get
			{
				return this._LockoutEndDateUtc;
			}
			set
			{
				if ((this._LockoutEndDateUtc != value))
				{
					this.OnLockoutEndDateUtcChanging(value);
					this.SendPropertyChanging();
					this._LockoutEndDateUtc = value;
					this.SendPropertyChanged("LockoutEndDateUtc");
					this.OnLockoutEndDateUtcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LockoutEnabled", DbType="Bit NOT NULL")]
		public bool LockoutEnabled
		{
			get
			{
				return this._LockoutEnabled;
			}
			set
			{
				if ((this._LockoutEnabled != value))
				{
					this.OnLockoutEnabledChanging(value);
					this.SendPropertyChanging();
					this._LockoutEnabled = value;
					this.SendPropertyChanged("LockoutEnabled");
					this.OnLockoutEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessFailedCount", DbType="Int NOT NULL")]
		public int AccessFailedCount
		{
			get
			{
				return this._AccessFailedCount;
			}
			set
			{
				if ((this._AccessFailedCount != value))
				{
					this.OnAccessFailedCountChanging(value);
					this.SendPropertyChanging();
					this._AccessFailedCount = value;
					this.SendPropertyChanged("AccessFailedCount");
					this.OnAccessFailedCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_Artist", Storage="_Artists", ThisKey="Id", OtherKey="ModiBy")]
		public EntitySet<Artist> Artists
		{
			get
			{
				return this._Artists;
			}
			set
			{
				this._Artists.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_ArtistsXUser", Storage="_ArtistsXUsers", ThisKey="Id", OtherKey="UID")]
		public EntitySet<ArtistsXUser> ArtistsXUsers
		{
			get
			{
				return this._ArtistsXUsers;
			}
			set
			{
				this._ArtistsXUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_ArtworkFilter", Storage="_ArtworkFilters", ThisKey="Id", OtherKey="ModiBy")]
		public EntitySet<ArtworkFilter> ArtworkFilters
		{
			get
			{
				return this._ArtworkFilters;
			}
			set
			{
				this._ArtworkFilters.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_ArtworkFiltersXUser", Storage="_ArtworkFiltersXUsers", ThisKey="Id", OtherKey="UID")]
		public EntitySet<ArtworkFiltersXUser> ArtworkFiltersXUsers
		{
			get
			{
				return this._ArtworkFiltersXUsers;
			}
			set
			{
				this._ArtworkFiltersXUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_ArtworkMetadata", Storage="_ArtworkMetadatas", ThisKey="Id", OtherKey="ModiBy")]
		public EntitySet<ArtworkMetadata> ArtworkMetadatas
		{
			get
			{
				return this._ArtworkMetadatas;
			}
			set
			{
				this._ArtworkMetadatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_Artwork", Storage="_Artworks", ThisKey="Id", OtherKey="ModiBy")]
		public EntitySet<Artwork> Artworks
		{
			get
			{
				return this._Artworks;
			}
			set
			{
				this._Artworks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_ArtworksXUser", Storage="_ArtworksXUsers", ThisKey="Id", OtherKey="UID")]
		public EntitySet<ArtworksXUser> ArtworksXUsers
		{
			get
			{
				return this._ArtworksXUsers;
			}
			set
			{
				this._ArtworksXUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_CreditsXUser", Storage="_CreditsXUser", ThisKey="Id", OtherKey="UID", IsUnique=true, IsForeignKey=false)]
		public CreditsXUser CreditsXUser
		{
			get
			{
				return this._CreditsXUser.Entity;
			}
			set
			{
				CreditsXUser previousValue = this._CreditsXUser.Entity;
				if (((previousValue != value) 
							|| (this._CreditsXUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CreditsXUser.Entity = null;
						previousValue.AspNetUser = null;
					}
					this._CreditsXUser.Entity = value;
					if ((value != null))
					{
						value.AspNetUser = this;
					}
					this.SendPropertyChanged("CreditsXUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_MuseumKey", Storage="_MuseumKeys", ThisKey="Id", OtherKey="ModiBy")]
		public EntitySet<MuseumKey> MuseumKeys
		{
			get
			{
				return this._MuseumKeys;
			}
			set
			{
				this._MuseumKeys.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_MuseumMetadata", Storage="_MuseumMetadatas", ThisKey="Id", OtherKey="ModiBy")]
		public EntitySet<MuseumMetadata> MuseumMetadatas
		{
			get
			{
				return this._MuseumMetadatas;
			}
			set
			{
				this._MuseumMetadatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_Museum", Storage="_Museums", ThisKey="Id", OtherKey="ModiBy")]
		public EntitySet<Museum> Museums
		{
			get
			{
				return this._Museums;
			}
			set
			{
				this._Museums.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_Museum1", Storage="_Museums1", ThisKey="Id", OtherKey="OwnerID")]
		public EntitySet<Museum> Museums1
		{
			get
			{
				return this._Museums1;
			}
			set
			{
				this._Museums1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_MuseumUserVisit", Storage="_MuseumUserVisits", ThisKey="Id", OtherKey="UID")]
		public EntitySet<MuseumUserVisit> MuseumUserVisits
		{
			get
			{
				return this._MuseumUserVisits;
			}
			set
			{
				this._MuseumUserVisits.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Artists(Artist entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = this;
		}
		
		private void detach_Artists(Artist entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = null;
		}
		
		private void attach_ArtistsXUsers(ArtistsXUser entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = this;
		}
		
		private void detach_ArtistsXUsers(ArtistsXUser entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = null;
		}
		
		private void attach_ArtworkFilters(ArtworkFilter entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = this;
		}
		
		private void detach_ArtworkFilters(ArtworkFilter entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = null;
		}
		
		private void attach_ArtworkFiltersXUsers(ArtworkFiltersXUser entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = this;
		}
		
		private void detach_ArtworkFiltersXUsers(ArtworkFiltersXUser entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = null;
		}
		
		private void attach_ArtworkMetadatas(ArtworkMetadata entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = this;
		}
		
		private void detach_ArtworkMetadatas(ArtworkMetadata entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = null;
		}
		
		private void attach_Artworks(Artwork entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = this;
		}
		
		private void detach_Artworks(Artwork entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = null;
		}
		
		private void attach_ArtworksXUsers(ArtworksXUser entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = this;
		}
		
		private void detach_ArtworksXUsers(ArtworksXUser entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = null;
		}
		
		private void attach_MuseumKeys(MuseumKey entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = this;
		}
		
		private void detach_MuseumKeys(MuseumKey entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = null;
		}
		
		private void attach_MuseumMetadatas(MuseumMetadata entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = this;
		}
		
		private void detach_MuseumMetadatas(MuseumMetadata entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = null;
		}
		
		private void attach_Museums(Museum entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = this;
		}
		
		private void detach_Museums(Museum entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = null;
		}
		
		private void attach_Museums1(Museum entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser1 = this;
		}
		
		private void detach_Museums1(Museum entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser1 = null;
		}
		
		private void attach_MuseumUserVisits(MuseumUserVisit entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = this;
		}
		
		private void detach_MuseumUserVisits(MuseumUserVisit entity)
		{
			this.SendPropertyChanging();
			entity.AspNetUser = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ConfigValues")]
	public partial class ConfigValue : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Setting;
		
		private string _Value;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnSettingChanging(string value);
    partial void OnSettingChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public ConfigValue()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Setting", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Setting
		{
			get
			{
				return this._Setting;
			}
			set
			{
				if ((this._Setting != value))
				{
					this.OnSettingChanging(value);
					this.SendPropertyChanging();
					this._Setting = value;
					this.SendPropertyChanged("Setting");
					this.OnSettingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CreditActions")]
	public partial class CreditAction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Description;
		
		private int _Credits;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCreditsChanging(int value);
    partial void OnCreditsChanged();
    #endregion
		
		public CreditAction()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Credits", DbType="Int NOT NULL")]
		public int Credits
		{
			get
			{
				return this._Credits;
			}
			set
			{
				if ((this._Credits != value))
				{
					this.OnCreditsChanging(value);
					this.SendPropertyChanging();
					this._Credits = value;
					this.SendPropertyChanged("Credits");
					this.OnCreditsChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CreditsXUsers")]
	public partial class CreditsXUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UID;
		
		private int _Credits;
		
		private System.DateTime _ModiDate;
		
		private EntityRef<AspNetUser> _AspNetUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(string value);
    partial void OnUIDChanged();
    partial void OnCreditsChanging(int value);
    partial void OnCreditsChanged();
    partial void OnModiDateChanging(System.DateTime value);
    partial void OnModiDateChanged();
    #endregion
		
		public CreditsXUser()
		{
			this._AspNetUser = default(EntityRef<AspNetUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					if (this._AspNetUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Credits", DbType="Int NOT NULL")]
		public int Credits
		{
			get
			{
				return this._Credits;
			}
			set
			{
				if ((this._Credits != value))
				{
					this.OnCreditsChanging(value);
					this.SendPropertyChanging();
					this._Credits = value;
					this.SendPropertyChanged("Credits");
					this.OnCreditsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModiDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModiDate
		{
			get
			{
				return this._ModiDate;
			}
			set
			{
				if ((this._ModiDate != value))
				{
					this.OnModiDateChanging(value);
					this.SendPropertyChanging();
					this._ModiDate = value;
					this.SendPropertyChanged("ModiDate");
					this.OnModiDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_CreditsXUser", Storage="_AspNetUser", ThisKey="UID", OtherKey="Id", IsForeignKey=true)]
		public AspNetUser AspNetUser
		{
			get
			{
				return this._AspNetUser.Entity;
			}
			set
			{
				AspNetUser previousValue = this._AspNetUser.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUser.Entity = null;
						previousValue.CreditsXUser = null;
					}
					this._AspNetUser.Entity = value;
					if ((value != null))
					{
						value.CreditsXUser = this;
						this._UID = value.Id;
					}
					else
					{
						this._UID = default(string);
					}
					this.SendPropertyChanged("AspNetUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MuseumKeys")]
	public partial class MuseumKey : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _ModiBy;
		
		private System.DateTime _ModiDate;
		
		private EntitySet<MuseumMetadata> _MuseumMetadatas;
		
		private EntityRef<AspNetUser> _AspNetUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnModiByChanging(string value);
    partial void OnModiByChanged();
    partial void OnModiDateChanging(System.DateTime value);
    partial void OnModiDateChanged();
    #endregion
		
		public MuseumKey()
		{
			this._MuseumMetadatas = new EntitySet<MuseumMetadata>(new Action<MuseumMetadata>(this.attach_MuseumMetadatas), new Action<MuseumMetadata>(this.detach_MuseumMetadatas));
			this._AspNetUser = default(EntityRef<AspNetUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModiBy", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string ModiBy
		{
			get
			{
				return this._ModiBy;
			}
			set
			{
				if ((this._ModiBy != value))
				{
					if (this._AspNetUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModiByChanging(value);
					this.SendPropertyChanging();
					this._ModiBy = value;
					this.SendPropertyChanged("ModiBy");
					this.OnModiByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModiDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModiDate
		{
			get
			{
				return this._ModiDate;
			}
			set
			{
				if ((this._ModiDate != value))
				{
					this.OnModiDateChanging(value);
					this.SendPropertyChanging();
					this._ModiDate = value;
					this.SendPropertyChanged("ModiDate");
					this.OnModiDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MuseumKey_MuseumMetadata", Storage="_MuseumMetadatas", ThisKey="ID", OtherKey="KeyID")]
		public EntitySet<MuseumMetadata> MuseumMetadatas
		{
			get
			{
				return this._MuseumMetadatas;
			}
			set
			{
				this._MuseumMetadatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_MuseumKey", Storage="_AspNetUser", ThisKey="ModiBy", OtherKey="Id", IsForeignKey=true)]
		public AspNetUser AspNetUser
		{
			get
			{
				return this._AspNetUser.Entity;
			}
			set
			{
				AspNetUser previousValue = this._AspNetUser.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUser.Entity = null;
						previousValue.MuseumKeys.Remove(this);
					}
					this._AspNetUser.Entity = value;
					if ((value != null))
					{
						value.MuseumKeys.Add(this);
						this._ModiBy = value.Id;
					}
					else
					{
						this._ModiBy = default(string);
					}
					this.SendPropertyChanged("AspNetUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MuseumMetadatas(MuseumMetadata entity)
		{
			this.SendPropertyChanging();
			entity.MuseumKey = this;
		}
		
		private void detach_MuseumMetadatas(MuseumMetadata entity)
		{
			this.SendPropertyChanging();
			entity.MuseumKey = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MuseumMetadata")]
	public partial class MuseumMetadata : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _MuseumID;
		
		private int _KeyID;
		
		private string _Value;
		
		private string _ModiBy;
		
		private System.DateTime _ModiDate;
		
		private EntityRef<MuseumKey> _MuseumKey;
		
		private EntityRef<AspNetUser> _AspNetUser;
		
		private EntityRef<Museum> _Museum;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnMuseumIDChanging(int value);
    partial void OnMuseumIDChanged();
    partial void OnKeyIDChanging(int value);
    partial void OnKeyIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnModiByChanging(string value);
    partial void OnModiByChanged();
    partial void OnModiDateChanging(System.DateTime value);
    partial void OnModiDateChanged();
    #endregion
		
		public MuseumMetadata()
		{
			this._MuseumKey = default(EntityRef<MuseumKey>);
			this._AspNetUser = default(EntityRef<AspNetUser>);
			this._Museum = default(EntityRef<Museum>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MuseumID", DbType="Int NOT NULL")]
		public int MuseumID
		{
			get
			{
				return this._MuseumID;
			}
			set
			{
				if ((this._MuseumID != value))
				{
					if (this._Museum.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMuseumIDChanging(value);
					this.SendPropertyChanging();
					this._MuseumID = value;
					this.SendPropertyChanged("MuseumID");
					this.OnMuseumIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KeyID", DbType="Int NOT NULL")]
		public int KeyID
		{
			get
			{
				return this._KeyID;
			}
			set
			{
				if ((this._KeyID != value))
				{
					if (this._MuseumKey.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnKeyIDChanging(value);
					this.SendPropertyChanging();
					this._KeyID = value;
					this.SendPropertyChanged("KeyID");
					this.OnKeyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModiBy", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string ModiBy
		{
			get
			{
				return this._ModiBy;
			}
			set
			{
				if ((this._ModiBy != value))
				{
					if (this._AspNetUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModiByChanging(value);
					this.SendPropertyChanging();
					this._ModiBy = value;
					this.SendPropertyChanged("ModiBy");
					this.OnModiByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModiDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModiDate
		{
			get
			{
				return this._ModiDate;
			}
			set
			{
				if ((this._ModiDate != value))
				{
					this.OnModiDateChanging(value);
					this.SendPropertyChanging();
					this._ModiDate = value;
					this.SendPropertyChanged("ModiDate");
					this.OnModiDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="MuseumKey_MuseumMetadata", Storage="_MuseumKey", ThisKey="KeyID", OtherKey="ID", IsForeignKey=true)]
		public MuseumKey MuseumKey
		{
			get
			{
				return this._MuseumKey.Entity;
			}
			set
			{
				MuseumKey previousValue = this._MuseumKey.Entity;
				if (((previousValue != value) 
							|| (this._MuseumKey.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MuseumKey.Entity = null;
						previousValue.MuseumMetadatas.Remove(this);
					}
					this._MuseumKey.Entity = value;
					if ((value != null))
					{
						value.MuseumMetadatas.Add(this);
						this._KeyID = value.ID;
					}
					else
					{
						this._KeyID = default(int);
					}
					this.SendPropertyChanged("MuseumKey");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_MuseumMetadata", Storage="_AspNetUser", ThisKey="ModiBy", OtherKey="Id", IsForeignKey=true)]
		public AspNetUser AspNetUser
		{
			get
			{
				return this._AspNetUser.Entity;
			}
			set
			{
				AspNetUser previousValue = this._AspNetUser.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUser.Entity = null;
						previousValue.MuseumMetadatas.Remove(this);
					}
					this._AspNetUser.Entity = value;
					if ((value != null))
					{
						value.MuseumMetadatas.Add(this);
						this._ModiBy = value.Id;
					}
					else
					{
						this._ModiBy = default(string);
					}
					this.SendPropertyChanged("AspNetUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Museum_MuseumMetadata", Storage="_Museum", ThisKey="MuseumID", OtherKey="ID", IsForeignKey=true)]
		public Museum Museum
		{
			get
			{
				return this._Museum.Entity;
			}
			set
			{
				Museum previousValue = this._Museum.Entity;
				if (((previousValue != value) 
							|| (this._Museum.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Museum.Entity = null;
						previousValue.MuseumMetadatas.Remove(this);
					}
					this._Museum.Entity = value;
					if ((value != null))
					{
						value.MuseumMetadatas.Add(this);
						this._MuseumID = value.ID;
					}
					else
					{
						this._MuseumID = default(int);
					}
					this.SendPropertyChanged("Museum");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MuseumRatings")]
	public partial class MuseumRating : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UID;
		
		private int _MuseumID;
		
		private int _Rating;
		
		private System.DateTime _ModiDate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(string value);
    partial void OnUIDChanged();
    partial void OnMuseumIDChanging(int value);
    partial void OnMuseumIDChanged();
    partial void OnRatingChanging(int value);
    partial void OnRatingChanged();
    partial void OnModiDateChanging(System.DateTime value);
    partial void OnModiDateChanged();
    #endregion
		
		public MuseumRating()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MuseumID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MuseumID
		{
			get
			{
				return this._MuseumID;
			}
			set
			{
				if ((this._MuseumID != value))
				{
					this.OnMuseumIDChanging(value);
					this.SendPropertyChanging();
					this._MuseumID = value;
					this.SendPropertyChanged("MuseumID");
					this.OnMuseumIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rating", DbType="Int NOT NULL")]
		public int Rating
		{
			get
			{
				return this._Rating;
			}
			set
			{
				if ((this._Rating != value))
				{
					this.OnRatingChanging(value);
					this.SendPropertyChanging();
					this._Rating = value;
					this.SendPropertyChanged("Rating");
					this.OnRatingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModiDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModiDate
		{
			get
			{
				return this._ModiDate;
			}
			set
			{
				if ((this._ModiDate != value))
				{
					this.OnModiDateChanging(value);
					this.SendPropertyChanging();
					this._ModiDate = value;
					this.SendPropertyChanged("ModiDate");
					this.OnModiDateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Museums")]
	public partial class Museum : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Data.Linq.Binary _Data;
		
		private string _Name;
		
		private string _Description;
		
		private string _OwnerID;
		
		private int _Status;
		
		private int _PrivacyLevelID;
		
		private int _Visited;
		
		private string _ModiBy;
		
		private System.DateTime _ModiDate;
		
		private EntitySet<MuseumMetadata> _MuseumMetadatas;
		
		private EntitySet<MuseumsXArtwork> _MuseumsXArtworks;
		
		private EntitySet<MuseumUserVisit> _MuseumUserVisits;
		
		private EntityRef<AspNetUser> _AspNetUser;
		
		private EntityRef<AspNetUser> _AspNetUser1;
		
		private EntityRef<PrivacyLevel> _PrivacyLevel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDataChanging(System.Data.Linq.Binary value);
    partial void OnDataChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnOwnerIDChanging(string value);
    partial void OnOwnerIDChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    partial void OnPrivacyLevelIDChanging(int value);
    partial void OnPrivacyLevelIDChanged();
    partial void OnVisitedChanging(int value);
    partial void OnVisitedChanged();
    partial void OnModiByChanging(string value);
    partial void OnModiByChanged();
    partial void OnModiDateChanging(System.DateTime value);
    partial void OnModiDateChanged();
    #endregion
		
		public Museum()
		{
			this._MuseumMetadatas = new EntitySet<MuseumMetadata>(new Action<MuseumMetadata>(this.attach_MuseumMetadatas), new Action<MuseumMetadata>(this.detach_MuseumMetadatas));
			this._MuseumsXArtworks = new EntitySet<MuseumsXArtwork>(new Action<MuseumsXArtwork>(this.attach_MuseumsXArtworks), new Action<MuseumsXArtwork>(this.detach_MuseumsXArtworks));
			this._MuseumUserVisits = new EntitySet<MuseumUserVisit>(new Action<MuseumUserVisit>(this.attach_MuseumUserVisits), new Action<MuseumUserVisit>(this.detach_MuseumUserVisits));
			this._AspNetUser = default(EntityRef<AspNetUser>);
			this._AspNetUser1 = default(EntityRef<AspNetUser>);
			this._PrivacyLevel = default(EntityRef<PrivacyLevel>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Data", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OwnerID", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string OwnerID
		{
			get
			{
				return this._OwnerID;
			}
			set
			{
				if ((this._OwnerID != value))
				{
					if (this._AspNetUser1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerIDChanging(value);
					this.SendPropertyChanging();
					this._OwnerID = value;
					this.SendPropertyChanged("OwnerID");
					this.OnOwnerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrivacyLevelID", DbType="Int NOT NULL")]
		public int PrivacyLevelID
		{
			get
			{
				return this._PrivacyLevelID;
			}
			set
			{
				if ((this._PrivacyLevelID != value))
				{
					if (this._PrivacyLevel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPrivacyLevelIDChanging(value);
					this.SendPropertyChanging();
					this._PrivacyLevelID = value;
					this.SendPropertyChanged("PrivacyLevelID");
					this.OnPrivacyLevelIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Visited", DbType="Int NOT NULL")]
		public int Visited
		{
			get
			{
				return this._Visited;
			}
			set
			{
				if ((this._Visited != value))
				{
					this.OnVisitedChanging(value);
					this.SendPropertyChanging();
					this._Visited = value;
					this.SendPropertyChanged("Visited");
					this.OnVisitedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModiBy", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string ModiBy
		{
			get
			{
				return this._ModiBy;
			}
			set
			{
				if ((this._ModiBy != value))
				{
					if (this._AspNetUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModiByChanging(value);
					this.SendPropertyChanging();
					this._ModiBy = value;
					this.SendPropertyChanged("ModiBy");
					this.OnModiByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModiDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModiDate
		{
			get
			{
				return this._ModiDate;
			}
			set
			{
				if ((this._ModiDate != value))
				{
					this.OnModiDateChanging(value);
					this.SendPropertyChanging();
					this._ModiDate = value;
					this.SendPropertyChanged("ModiDate");
					this.OnModiDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Museum_MuseumMetadata", Storage="_MuseumMetadatas", ThisKey="ID", OtherKey="MuseumID")]
		public EntitySet<MuseumMetadata> MuseumMetadatas
		{
			get
			{
				return this._MuseumMetadatas;
			}
			set
			{
				this._MuseumMetadatas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Museum_MuseumsXArtwork", Storage="_MuseumsXArtworks", ThisKey="ID", OtherKey="MuseumID")]
		public EntitySet<MuseumsXArtwork> MuseumsXArtworks
		{
			get
			{
				return this._MuseumsXArtworks;
			}
			set
			{
				this._MuseumsXArtworks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Museum_MuseumUserVisit", Storage="_MuseumUserVisits", ThisKey="ID", OtherKey="MuseumID")]
		public EntitySet<MuseumUserVisit> MuseumUserVisits
		{
			get
			{
				return this._MuseumUserVisits;
			}
			set
			{
				this._MuseumUserVisits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_Museum", Storage="_AspNetUser", ThisKey="ModiBy", OtherKey="Id", IsForeignKey=true)]
		public AspNetUser AspNetUser
		{
			get
			{
				return this._AspNetUser.Entity;
			}
			set
			{
				AspNetUser previousValue = this._AspNetUser.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUser.Entity = null;
						previousValue.Museums.Remove(this);
					}
					this._AspNetUser.Entity = value;
					if ((value != null))
					{
						value.Museums.Add(this);
						this._ModiBy = value.Id;
					}
					else
					{
						this._ModiBy = default(string);
					}
					this.SendPropertyChanged("AspNetUser");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_Museum1", Storage="_AspNetUser1", ThisKey="OwnerID", OtherKey="Id", IsForeignKey=true)]
		public AspNetUser AspNetUser1
		{
			get
			{
				return this._AspNetUser1.Entity;
			}
			set
			{
				AspNetUser previousValue = this._AspNetUser1.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUser1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUser1.Entity = null;
						previousValue.Museums1.Remove(this);
					}
					this._AspNetUser1.Entity = value;
					if ((value != null))
					{
						value.Museums1.Add(this);
						this._OwnerID = value.Id;
					}
					else
					{
						this._OwnerID = default(string);
					}
					this.SendPropertyChanged("AspNetUser1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PrivacyLevel_Museum", Storage="_PrivacyLevel", ThisKey="PrivacyLevelID", OtherKey="ID", IsForeignKey=true)]
		public PrivacyLevel PrivacyLevel
		{
			get
			{
				return this._PrivacyLevel.Entity;
			}
			set
			{
				PrivacyLevel previousValue = this._PrivacyLevel.Entity;
				if (((previousValue != value) 
							|| (this._PrivacyLevel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PrivacyLevel.Entity = null;
						previousValue.Museums.Remove(this);
					}
					this._PrivacyLevel.Entity = value;
					if ((value != null))
					{
						value.Museums.Add(this);
						this._PrivacyLevelID = value.ID;
					}
					else
					{
						this._PrivacyLevelID = default(int);
					}
					this.SendPropertyChanged("PrivacyLevel");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MuseumMetadatas(MuseumMetadata entity)
		{
			this.SendPropertyChanging();
			entity.Museum = this;
		}
		
		private void detach_MuseumMetadatas(MuseumMetadata entity)
		{
			this.SendPropertyChanging();
			entity.Museum = null;
		}
		
		private void attach_MuseumsXArtworks(MuseumsXArtwork entity)
		{
			this.SendPropertyChanging();
			entity.Museum = this;
		}
		
		private void detach_MuseumsXArtworks(MuseumsXArtwork entity)
		{
			this.SendPropertyChanging();
			entity.Museum = null;
		}
		
		private void attach_MuseumUserVisits(MuseumUserVisit entity)
		{
			this.SendPropertyChanging();
			entity.Museum = this;
		}
		
		private void detach_MuseumUserVisits(MuseumUserVisit entity)
		{
			this.SendPropertyChanging();
			entity.Museum = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MuseumsXArtworks")]
	public partial class MuseumsXArtwork : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MuseumID;
		
		private int _ArtworkID;
		
		private EntityRef<Artwork> _Artwork;
		
		private EntityRef<Museum> _Museum;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMuseumIDChanging(int value);
    partial void OnMuseumIDChanged();
    partial void OnArtworkIDChanging(int value);
    partial void OnArtworkIDChanged();
    #endregion
		
		public MuseumsXArtwork()
		{
			this._Artwork = default(EntityRef<Artwork>);
			this._Museum = default(EntityRef<Museum>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MuseumID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MuseumID
		{
			get
			{
				return this._MuseumID;
			}
			set
			{
				if ((this._MuseumID != value))
				{
					if (this._Museum.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMuseumIDChanging(value);
					this.SendPropertyChanging();
					this._MuseumID = value;
					this.SendPropertyChanged("MuseumID");
					this.OnMuseumIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArtworkID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ArtworkID
		{
			get
			{
				return this._ArtworkID;
			}
			set
			{
				if ((this._ArtworkID != value))
				{
					if (this._Artwork.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArtworkIDChanging(value);
					this.SendPropertyChanging();
					this._ArtworkID = value;
					this.SendPropertyChanged("ArtworkID");
					this.OnArtworkIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Artwork_MuseumsXArtwork", Storage="_Artwork", ThisKey="ArtworkID", OtherKey="ID", IsForeignKey=true)]
		public Artwork Artwork
		{
			get
			{
				return this._Artwork.Entity;
			}
			set
			{
				Artwork previousValue = this._Artwork.Entity;
				if (((previousValue != value) 
							|| (this._Artwork.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Artwork.Entity = null;
						previousValue.MuseumsXArtworks.Remove(this);
					}
					this._Artwork.Entity = value;
					if ((value != null))
					{
						value.MuseumsXArtworks.Add(this);
						this._ArtworkID = value.ID;
					}
					else
					{
						this._ArtworkID = default(int);
					}
					this.SendPropertyChanged("Artwork");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Museum_MuseumsXArtwork", Storage="_Museum", ThisKey="MuseumID", OtherKey="ID", IsForeignKey=true)]
		public Museum Museum
		{
			get
			{
				return this._Museum.Entity;
			}
			set
			{
				Museum previousValue = this._Museum.Entity;
				if (((previousValue != value) 
							|| (this._Museum.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Museum.Entity = null;
						previousValue.MuseumsXArtworks.Remove(this);
					}
					this._Museum.Entity = value;
					if ((value != null))
					{
						value.MuseumsXArtworks.Add(this);
						this._MuseumID = value.ID;
					}
					else
					{
						this._MuseumID = default(int);
					}
					this.SendPropertyChanged("Museum");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MuseumUserVisits")]
	public partial class MuseumUserVisit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MuseumID;
		
		private string _UID;
		
		private EntityRef<Museum> _Museum;
		
		private EntityRef<AspNetUser> _AspNetUser;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMuseumIDChanging(int value);
    partial void OnMuseumIDChanged();
    partial void OnUIDChanging(string value);
    partial void OnUIDChanged();
    #endregion
		
		public MuseumUserVisit()
		{
			this._Museum = default(EntityRef<Museum>);
			this._AspNetUser = default(EntityRef<AspNetUser>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MuseumID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MuseumID
		{
			get
			{
				return this._MuseumID;
			}
			set
			{
				if ((this._MuseumID != value))
				{
					if (this._Museum.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMuseumIDChanging(value);
					this.SendPropertyChanging();
					this._MuseumID = value;
					this.SendPropertyChanged("MuseumID");
					this.OnMuseumIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					if (this._AspNetUser.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Museum_MuseumUserVisit", Storage="_Museum", ThisKey="MuseumID", OtherKey="ID", IsForeignKey=true)]
		public Museum Museum
		{
			get
			{
				return this._Museum.Entity;
			}
			set
			{
				Museum previousValue = this._Museum.Entity;
				if (((previousValue != value) 
							|| (this._Museum.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Museum.Entity = null;
						previousValue.MuseumUserVisits.Remove(this);
					}
					this._Museum.Entity = value;
					if ((value != null))
					{
						value.MuseumUserVisits.Add(this);
						this._MuseumID = value.ID;
					}
					else
					{
						this._MuseumID = default(int);
					}
					this.SendPropertyChanged("Museum");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetUser_MuseumUserVisit", Storage="_AspNetUser", ThisKey="UID", OtherKey="Id", IsForeignKey=true)]
		public AspNetUser AspNetUser
		{
			get
			{
				return this._AspNetUser.Entity;
			}
			set
			{
				AspNetUser previousValue = this._AspNetUser.Entity;
				if (((previousValue != value) 
							|| (this._AspNetUser.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetUser.Entity = null;
						previousValue.MuseumUserVisits.Remove(this);
					}
					this._AspNetUser.Entity = value;
					if ((value != null))
					{
						value.MuseumUserVisits.Add(this);
						this._UID = value.Id;
					}
					else
					{
						this._UID = default(string);
					}
					this.SendPropertyChanged("AspNetUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
