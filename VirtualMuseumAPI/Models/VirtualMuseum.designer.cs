#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace VirtualMuseumAPI.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="VirtualMuseum")]
	public partial class VirtualMuseumDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertArtist(Artist instance);
    partial void UpdateArtist(Artist instance);
    partial void DeleteArtist(Artist instance);
    partial void InsertArtwork(Artwork instance);
    partial void UpdateArtwork(Artwork instance);
    partial void DeleteArtwork(Artwork instance);
    partial void InsertArtworkKey(ArtworkKey instance);
    partial void UpdateArtworkKey(ArtworkKey instance);
    partial void DeleteArtworkKey(ArtworkKey instance);
    partial void InsertArtworkMetadata(ArtworkMetadata instance);
    partial void UpdateArtworkMetadata(ArtworkMetadata instance);
    partial void DeleteArtworkMetadata(ArtworkMetadata instance);
    partial void InsertArtworkRepresentation(ArtworkRepresentation instance);
    partial void UpdateArtworkRepresentation(ArtworkRepresentation instance);
    partial void DeleteArtworkRepresentation(ArtworkRepresentation instance);
    partial void InsertUsersXArtwork(UsersXArtwork instance);
    partial void UpdateUsersXArtwork(UsersXArtwork instance);
    partial void DeleteUsersXArtwork(UsersXArtwork instance);
    #endregion
		
		public VirtualMuseumDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["VirtualMuseumConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public VirtualMuseumDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public VirtualMuseumDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public VirtualMuseumDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public VirtualMuseumDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Artist> Artists
		{
			get
			{
				return this.GetTable<Artist>();
			}
		}
		
		public System.Data.Linq.Table<Artwork> Artworks
		{
			get
			{
				return this.GetTable<Artwork>();
			}
		}
		
		public System.Data.Linq.Table<ArtworkKey> ArtworkKeys
		{
			get
			{
				return this.GetTable<ArtworkKey>();
			}
		}
		
		public System.Data.Linq.Table<ArtworkMetadata> ArtworkMetadatas
		{
			get
			{
				return this.GetTable<ArtworkMetadata>();
			}
		}
		
		public System.Data.Linq.Table<ArtworkRepresentation> ArtworkRepresentations
		{
			get
			{
				return this.GetTable<ArtworkRepresentation>();
			}
		}
		
		public System.Data.Linq.Table<UsersXArtwork> UsersXArtworks
		{
			get
			{
				return this.GetTable<UsersXArtwork>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Artists")]
	public partial class Artist : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _UID;
		
		private string _ModiBy;
		
		private System.DateTime _ModiDate;
		
		private EntitySet<Artwork> _Artworks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnUIDChanging(string value);
    partial void OnUIDChanged();
    partial void OnModiByChanging(string value);
    partial void OnModiByChanged();
    partial void OnModiDateChanging(System.DateTime value);
    partial void OnModiDateChanged();
    #endregion
		
		public Artist()
		{
			this._Artworks = new EntitySet<Artwork>(new Action<Artwork>(this.attach_Artworks), new Action<Artwork>(this.detach_Artworks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="NVarChar(128)")]
		public string UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModiBy", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string ModiBy
		{
			get
			{
				return this._ModiBy;
			}
			set
			{
				if ((this._ModiBy != value))
				{
					this.OnModiByChanging(value);
					this.SendPropertyChanging();
					this._ModiBy = value;
					this.SendPropertyChanged("ModiBy");
					this.OnModiByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModiDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModiDate
		{
			get
			{
				return this._ModiDate;
			}
			set
			{
				if ((this._ModiDate != value))
				{
					this.OnModiDateChanging(value);
					this.SendPropertyChanging();
					this._ModiDate = value;
					this.SendPropertyChanged("ModiDate");
					this.OnModiDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Artist_Artwork", Storage="_Artworks", ThisKey="ID", OtherKey="ArtistID")]
		public EntitySet<Artwork> Artworks
		{
			get
			{
				return this._Artworks;
			}
			set
			{
				this._Artworks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Artworks(Artwork entity)
		{
			this.SendPropertyChanging();
			entity.Artist = this;
		}
		
		private void detach_Artworks(Artwork entity)
		{
			this.SendPropertyChanging();
			entity.Artist = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Artworks")]
	public partial class Artwork : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _name;
		
		private int _ArtistID;
		
		private string _ModiBy;
		
		private System.DateTime _ModiDate;
		
		private EntitySet<ArtworkRepresentation> _ArtworkRepresentations;
		
		private EntitySet<UsersXArtwork> _UsersXArtworks;
		
		private EntityRef<Artist> _Artist;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnArtistIDChanging(int value);
    partial void OnArtistIDChanged();
    partial void OnModiByChanging(string value);
    partial void OnModiByChanged();
    partial void OnModiDateChanging(System.DateTime value);
    partial void OnModiDateChanged();
    #endregion
		
		public Artwork()
		{
			this._ArtworkRepresentations = new EntitySet<ArtworkRepresentation>(new Action<ArtworkRepresentation>(this.attach_ArtworkRepresentations), new Action<ArtworkRepresentation>(this.detach_ArtworkRepresentations));
			this._UsersXArtworks = new EntitySet<UsersXArtwork>(new Action<UsersXArtwork>(this.attach_UsersXArtworks), new Action<UsersXArtwork>(this.detach_UsersXArtworks));
			this._Artist = default(EntityRef<Artist>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArtistID", DbType="Int NOT NULL")]
		public int ArtistID
		{
			get
			{
				return this._ArtistID;
			}
			set
			{
				if ((this._ArtistID != value))
				{
					if (this._Artist.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArtistIDChanging(value);
					this.SendPropertyChanging();
					this._ArtistID = value;
					this.SendPropertyChanged("ArtistID");
					this.OnArtistIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModiBy", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string ModiBy
		{
			get
			{
				return this._ModiBy;
			}
			set
			{
				if ((this._ModiBy != value))
				{
					this.OnModiByChanging(value);
					this.SendPropertyChanging();
					this._ModiBy = value;
					this.SendPropertyChanged("ModiBy");
					this.OnModiByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModiDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModiDate
		{
			get
			{
				return this._ModiDate;
			}
			set
			{
				if ((this._ModiDate != value))
				{
					this.OnModiDateChanging(value);
					this.SendPropertyChanging();
					this._ModiDate = value;
					this.SendPropertyChanged("ModiDate");
					this.OnModiDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Artwork_ArtworkRepresentation", Storage="_ArtworkRepresentations", ThisKey="ID", OtherKey="ArtworkID")]
		public EntitySet<ArtworkRepresentation> ArtworkRepresentations
		{
			get
			{
				return this._ArtworkRepresentations;
			}
			set
			{
				this._ArtworkRepresentations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Artwork_UsersXArtwork", Storage="_UsersXArtworks", ThisKey="ID", OtherKey="ArtworkID")]
		public EntitySet<UsersXArtwork> UsersXArtworks
		{
			get
			{
				return this._UsersXArtworks;
			}
			set
			{
				this._UsersXArtworks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Artist_Artwork", Storage="_Artist", ThisKey="ArtistID", OtherKey="ID", IsForeignKey=true)]
		public Artist Artist
		{
			get
			{
				return this._Artist.Entity;
			}
			set
			{
				Artist previousValue = this._Artist.Entity;
				if (((previousValue != value) 
							|| (this._Artist.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Artist.Entity = null;
						previousValue.Artworks.Remove(this);
					}
					this._Artist.Entity = value;
					if ((value != null))
					{
						value.Artworks.Add(this);
						this._ArtistID = value.ID;
					}
					else
					{
						this._ArtistID = default(int);
					}
					this.SendPropertyChanged("Artist");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ArtworkRepresentations(ArtworkRepresentation entity)
		{
			this.SendPropertyChanging();
			entity.Artwork = this;
		}
		
		private void detach_ArtworkRepresentations(ArtworkRepresentation entity)
		{
			this.SendPropertyChanging();
			entity.Artwork = null;
		}
		
		private void attach_UsersXArtworks(UsersXArtwork entity)
		{
			this.SendPropertyChanging();
			entity.Artwork = this;
		}
		
		private void detach_UsersXArtworks(UsersXArtwork entity)
		{
			this.SendPropertyChanging();
			entity.Artwork = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ArtworkKeys")]
	public partial class ArtworkKey : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _name;
		
		private string _ModiBy;
		
		private System.DateTime _ModiDate;
		
		private EntitySet<ArtworkMetadata> _ArtworkMetadatas;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void OnModiByChanging(string value);
    partial void OnModiByChanged();
    partial void OnModiDateChanging(System.DateTime value);
    partial void OnModiDateChanged();
    #endregion
		
		public ArtworkKey()
		{
			this._ArtworkMetadatas = new EntitySet<ArtworkMetadata>(new Action<ArtworkMetadata>(this.attach_ArtworkMetadatas), new Action<ArtworkMetadata>(this.detach_ArtworkMetadatas));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModiBy", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string ModiBy
		{
			get
			{
				return this._ModiBy;
			}
			set
			{
				if ((this._ModiBy != value))
				{
					this.OnModiByChanging(value);
					this.SendPropertyChanging();
					this._ModiBy = value;
					this.SendPropertyChanged("ModiBy");
					this.OnModiByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModiDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModiDate
		{
			get
			{
				return this._ModiDate;
			}
			set
			{
				if ((this._ModiDate != value))
				{
					this.OnModiDateChanging(value);
					this.SendPropertyChanging();
					this._ModiDate = value;
					this.SendPropertyChanged("ModiDate");
					this.OnModiDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ArtworkKey_ArtworkMetadata", Storage="_ArtworkMetadatas", ThisKey="ID", OtherKey="KeyID")]
		public EntitySet<ArtworkMetadata> ArtworkMetadatas
		{
			get
			{
				return this._ArtworkMetadatas;
			}
			set
			{
				this._ArtworkMetadatas.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ArtworkMetadatas(ArtworkMetadata entity)
		{
			this.SendPropertyChanging();
			entity.ArtworkKey = this;
		}
		
		private void detach_ArtworkMetadatas(ArtworkMetadata entity)
		{
			this.SendPropertyChanging();
			entity.ArtworkKey = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ArtworkMetadata")]
	public partial class ArtworkMetadata : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ArtworkID;
		
		private int _KeyID;
		
		private string _Value;
		
		private string _ModiBy;
		
		private System.DateTime _ModiDate;
		
		private EntityRef<ArtworkMetadata> _ArtworkMetadata2;
		
		private EntityRef<ArtworkKey> _ArtworkKey;
		
		private EntityRef<ArtworkMetadata> _ArtworkMetadata1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnArtworkIDChanging(int value);
    partial void OnArtworkIDChanged();
    partial void OnKeyIDChanging(int value);
    partial void OnKeyIDChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    partial void OnModiByChanging(string value);
    partial void OnModiByChanged();
    partial void OnModiDateChanging(System.DateTime value);
    partial void OnModiDateChanged();
    #endregion
		
		public ArtworkMetadata()
		{
			this._ArtworkMetadata2 = default(EntityRef<ArtworkMetadata>);
			this._ArtworkKey = default(EntityRef<ArtworkKey>);
			this._ArtworkMetadata1 = default(EntityRef<ArtworkMetadata>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					if (this._ArtworkMetadata1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArtworkID", DbType="Int NOT NULL")]
		public int ArtworkID
		{
			get
			{
				return this._ArtworkID;
			}
			set
			{
				if ((this._ArtworkID != value))
				{
					this.OnArtworkIDChanging(value);
					this.SendPropertyChanging();
					this._ArtworkID = value;
					this.SendPropertyChanged("ArtworkID");
					this.OnArtworkIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_KeyID", DbType="Int NOT NULL")]
		public int KeyID
		{
			get
			{
				return this._KeyID;
			}
			set
			{
				if ((this._KeyID != value))
				{
					if (this._ArtworkKey.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnKeyIDChanging(value);
					this.SendPropertyChanging();
					this._KeyID = value;
					this.SendPropertyChanged("KeyID");
					this.OnKeyIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModiBy", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string ModiBy
		{
			get
			{
				return this._ModiBy;
			}
			set
			{
				if ((this._ModiBy != value))
				{
					this.OnModiByChanging(value);
					this.SendPropertyChanging();
					this._ModiBy = value;
					this.SendPropertyChanged("ModiBy");
					this.OnModiByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModiDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModiDate
		{
			get
			{
				return this._ModiDate;
			}
			set
			{
				if ((this._ModiDate != value))
				{
					this.OnModiDateChanging(value);
					this.SendPropertyChanging();
					this._ModiDate = value;
					this.SendPropertyChanged("ModiDate");
					this.OnModiDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ArtworkMetadata_ArtworkMetadata", Storage="_ArtworkMetadata2", ThisKey="ID", OtherKey="ID", IsUnique=true, IsForeignKey=false)]
		public ArtworkMetadata ArtworkMetadata2
		{
			get
			{
				return this._ArtworkMetadata2.Entity;
			}
			set
			{
				ArtworkMetadata previousValue = this._ArtworkMetadata2.Entity;
				if (((previousValue != value) 
							|| (this._ArtworkMetadata2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ArtworkMetadata2.Entity = null;
						previousValue.ArtworkMetadata1 = null;
					}
					this._ArtworkMetadata2.Entity = value;
					if ((value != null))
					{
						value.ArtworkMetadata1 = this;
					}
					this.SendPropertyChanged("ArtworkMetadata2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ArtworkKey_ArtworkMetadata", Storage="_ArtworkKey", ThisKey="KeyID", OtherKey="ID", IsForeignKey=true)]
		public ArtworkKey ArtworkKey
		{
			get
			{
				return this._ArtworkKey.Entity;
			}
			set
			{
				ArtworkKey previousValue = this._ArtworkKey.Entity;
				if (((previousValue != value) 
							|| (this._ArtworkKey.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ArtworkKey.Entity = null;
						previousValue.ArtworkMetadatas.Remove(this);
					}
					this._ArtworkKey.Entity = value;
					if ((value != null))
					{
						value.ArtworkMetadatas.Add(this);
						this._KeyID = value.ID;
					}
					else
					{
						this._KeyID = default(int);
					}
					this.SendPropertyChanged("ArtworkKey");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ArtworkMetadata_ArtworkMetadata", Storage="_ArtworkMetadata1", ThisKey="ID", OtherKey="ID", IsForeignKey=true)]
		public ArtworkMetadata ArtworkMetadata1
		{
			get
			{
				return this._ArtworkMetadata1.Entity;
			}
			set
			{
				ArtworkMetadata previousValue = this._ArtworkMetadata1.Entity;
				if (((previousValue != value) 
							|| (this._ArtworkMetadata1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ArtworkMetadata1.Entity = null;
						previousValue.ArtworkMetadata2 = null;
					}
					this._ArtworkMetadata1.Entity = value;
					if ((value != null))
					{
						value.ArtworkMetadata2 = this;
						this._ID = value.ID;
					}
					else
					{
						this._ID = default(int);
					}
					this.SendPropertyChanged("ArtworkMetadata1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ArtworkRepresentations")]
	public partial class ArtworkRepresentation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ArtworkID;
		
		private int _Size;
		
		private System.Data.Linq.Binary _Data;
		
		private EntityRef<Artwork> _Artwork;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnArtworkIDChanging(int value);
    partial void OnArtworkIDChanged();
    partial void OnSizeChanging(int value);
    partial void OnSizeChanged();
    partial void OnDataChanging(System.Data.Linq.Binary value);
    partial void OnDataChanged();
    #endregion
		
		public ArtworkRepresentation()
		{
			this._Artwork = default(EntityRef<Artwork>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArtworkID", DbType="Int NOT NULL")]
		public int ArtworkID
		{
			get
			{
				return this._ArtworkID;
			}
			set
			{
				if ((this._ArtworkID != value))
				{
					if (this._Artwork.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArtworkIDChanging(value);
					this.SendPropertyChanging();
					this._ArtworkID = value;
					this.SendPropertyChanged("ArtworkID");
					this.OnArtworkIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Size", DbType="Int NOT NULL")]
		public int Size
		{
			get
			{
				return this._Size;
			}
			set
			{
				if ((this._Size != value))
				{
					this.OnSizeChanging(value);
					this.SendPropertyChanging();
					this._Size = value;
					this.SendPropertyChanged("Size");
					this.OnSizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Data", DbType="Image NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Artwork_ArtworkRepresentation", Storage="_Artwork", ThisKey="ArtworkID", OtherKey="ID", IsForeignKey=true)]
		public Artwork Artwork
		{
			get
			{
				return this._Artwork.Entity;
			}
			set
			{
				Artwork previousValue = this._Artwork.Entity;
				if (((previousValue != value) 
							|| (this._Artwork.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Artwork.Entity = null;
						previousValue.ArtworkRepresentations.Remove(this);
					}
					this._Artwork.Entity = value;
					if ((value != null))
					{
						value.ArtworkRepresentations.Add(this);
						this._ArtworkID = value.ID;
					}
					else
					{
						this._ArtworkID = default(int);
					}
					this.SendPropertyChanged("Artwork");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UsersXArtworks")]
	public partial class UsersXArtwork : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UID;
		
		private int _ArtworkID;
		
		private EntityRef<Artwork> _Artwork;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(string value);
    partial void OnUIDChanged();
    partial void OnArtworkIDChanging(int value);
    partial void OnArtworkIDChanged();
    #endregion
		
		public UsersXArtwork()
		{
			this._Artwork = default(EntityRef<Artwork>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ArtworkID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ArtworkID
		{
			get
			{
				return this._ArtworkID;
			}
			set
			{
				if ((this._ArtworkID != value))
				{
					if (this._Artwork.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnArtworkIDChanging(value);
					this.SendPropertyChanging();
					this._ArtworkID = value;
					this.SendPropertyChanged("ArtworkID");
					this.OnArtworkIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Artwork_UsersXArtwork", Storage="_Artwork", ThisKey="ArtworkID", OtherKey="ID", IsForeignKey=true)]
		public Artwork Artwork
		{
			get
			{
				return this._Artwork.Entity;
			}
			set
			{
				Artwork previousValue = this._Artwork.Entity;
				if (((previousValue != value) 
							|| (this._Artwork.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Artwork.Entity = null;
						previousValue.UsersXArtworks.Remove(this);
					}
					this._Artwork.Entity = value;
					if ((value != null))
					{
						value.UsersXArtworks.Add(this);
						this._ArtworkID = value.ID;
					}
					else
					{
						this._ArtworkID = default(int);
					}
					this.SendPropertyChanged("Artwork");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
